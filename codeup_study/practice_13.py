# 1098 : [기초-2차원배열] 설탕과자 뽑기

# 부모님과 함께 유원지에 놀러간 영일이는
# 설탕과자(설탕을 녹여 물고기 등의 모양을 만든 것) 뽑기를 보게 되었다.

# 길이가 다른 몇 개의 막대를 바둑판과 같은 격자판에 놓는데,

# 막대에 있는 설탕과자 이름 아래에 있는 번호를 뽑으면 설탕과자를 가져가는 게임이었다.
# (잉어, 붕어, 용 등 여러 가지가 적혀있다.)

# 격자판의 세로(h), 가로(w), 막대의 개수(n), 각 막대의 길이(l),
# 막대를 놓는 방향(d:가로는 0, 세로는 1)과
# 막대를 놓는 막대의 가장 왼쪽 또는 위쪽의 위치(x, y)가 주어질 때,

# 격자판을 채운 막대의 모양을 출력하는 프로그램을 만들어보자.

# 입력
# 첫 줄에 격자판의 세로(h), 가로(w) 가 공백을 두고 입력되고,
# 두 번째 줄에 놓을 수 있는 막대의 개수(n)
# 세 번째 줄부터 각 막대의 길이(l), 방향(d), 좌표(x, y)가 입력된다.

# 입력값의 정의역은 다음과 같다.

# 1 <= w, h <= 100
# 1 <= n <= 10
# d = 0 or 1
# 1 <= x <= 100-h
# 1 <= y <= 100-w


# 출력
# 모든 막대를 놓은 격자판의 상태를 출력한다.
# 막대에 의해 가려진 경우 1, 아닌 경우 0으로 출력한다.
# 단, 각 숫자는 공백으로 구분하여 출력한다.


# 입력 예시   
# 5 5
# 3
# 2 0 1 1
# 3 1 2 3
# 4 1 2 5

# 출력 예시
# 1 1 0 0 0
# 0 0 1 0 1
# 0 0 1 0 1
# 0 0 1 0 1
# 0 0 0 0 1


h, w = map(int, input().split())          # 격자판의 세로, 가로
n = int(input())                          # 막대의 개수
#l, d, x, y = map(int, input().split())   # 막대 길이, 방향(가로:0, 세로:1), 좌표 


# 세로가 h이고, 가로가 w인 2차원 리스트 만들기
graph = [[0 for i in range(w)] for j in range(h)]  


#막대의 개수 n개에 맞게 입력 받기
for k in range(n):
    l, d, x, y = map(int, input().split())
  
    graph[x-1][y-1] = 1

    if d == 1:
        if x+l-2 < h:

            for a in range(x-1,x+l-1):

                graph[a][y-1] = 1


        else :

            for c in range(x-l-2,x-1):

                graph[c][y-1] = 1     
    
    elif d == 0:
        if y+l-2 < w:

            for b in range(y-1,y+l-1):

                graph[x-1][b] = 1

        else :

            for g in range(y-l-2,y-1):

                graph[x-1][g] = 1


for e in graph:
    for d in e:
        print(d, end=" ")

    print()



# 막대의 길이가 l일 때, l 만큼의 공간을 차지한다.

# 막대의 위치
# graph[x][y] = 1   

# # d = 1일때, 막대가 차지하는 공간(x부터 x+l-1 까지 1이거나 x-l-1 부터 x까지 1)
# # x+l-1 <= h and x-l-1 >= 1
# graph[x+l-1][y] = 1 or graph[x-l-1][y] = 1

# # d = 0일때, 막대가 차지하는 공간(y부터 y+l-1 까지 1이거나 y-l-1 부터 x까지 1)
# # y+l-1 <= w and y-l-1 >= 1
# graph[x][y+l-1] = 1 or graph[x][y-l-1] = 1  


# if d == 1:

